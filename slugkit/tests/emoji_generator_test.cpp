#include <slugkit/generator/dictionary.hpp>
#include <slugkit/generator/pattern_generator.hpp>
#include <slugkit/generator/structured_loader.hpp>

#include <userver/formats/yaml.hpp>

#include <iostream>
#include <userver/utest/utest.hpp>

namespace slugkit::generator {

using namespace literals;

UTEST(EmojiGenerator, EmbeddedData) {
    EXPECT_GT(EmojiSubstitutionGenerator::kEmojiDictionaryText.size(), 0);
}

UTEST(EmojiGenerator, EmbeddedValidYaml) {
    ASSERT_NO_THROW(userver::formats::yaml::FromString(std::string{EmojiSubstitutionGenerator::kEmojiDictionaryText}));
    auto yaml = userver::formats::yaml::FromString(std::string{EmojiSubstitutionGenerator::kEmojiDictionaryText});
    ASSERT_TRUE(yaml.IsObject());
    ASSERT_EQ(yaml.GetSize(), 1);
    ASSERT_TRUE(yaml.HasMember("emoji"));
    ASSERT_TRUE(yaml["emoji"].HasMember("words"));
    ASSERT_TRUE(yaml["emoji"]["words"].IsObject());
    ASSERT_TRUE(yaml["emoji"]["words"].HasMember("üëç"));
    ASSERT_TRUE(yaml["emoji"]["words"]["üëç"].IsArray());
}

UTEST(EmojiGenerator, EmbeddedDictionaryParse) {
    ASSERT_NO_THROW(userver::formats::yaml::FromString(std::string{EmojiSubstitutionGenerator::kEmojiDictionaryText}));
    auto yaml = userver::formats::yaml::FromString(std::string{EmojiSubstitutionGenerator::kEmojiDictionaryText});
    ASSERT_TRUE(yaml.HasMember("emoji"));
    ASSERT_NO_THROW(yaml["emoji"].As<data::Dictionary<std::unordered_set<std::string>>>());
    auto data = yaml["emoji"].As<data::Dictionary<std::unordered_set<std::string>>>();
    EXPECT_TRUE(data.language.empty());
    EXPECT_FALSE(data.words.empty());
    EXPECT_GT(data.words.size(), 0);
    std::cerr << "Emoji dictionary size: " << data.words.size() << std::endl;
    std::size_t max_symbol_length = 0;
    std::string max_symbol;
    for (const auto& item : data.words) {
        max_symbol_length = std::max(max_symbol_length, item.word.size());
        max_symbol = item.word;
    }
    std::cerr << "Max symbol length: " << max_symbol_length << std::endl;
    std::cerr << "Max symbol: " << max_symbol << std::endl;
}

UTEST(EmojiGenerator, GetTagDefinitions) {
    auto tag_definitions = kEmojiDictionary.GetTagDefinitions();
    EXPECT_GT(tag_definitions.size(), 0);
}

UTEST(EmojiGenerator, Generate) {
    EmojiSubstitutionGenerator generator{"emoji"_emoji_gen};
    auto seed_hash = PatternGenerator::SeedHash("test");
    EXPECT_EQ(generator.Generate(seed_hash, 0), "üêã");
    EXPECT_EQ(generator.Generate(seed_hash, 1), "üèÇ");
    EXPECT_EQ(generator.Generate(seed_hash, 2), "‚ù§Ô∏è‚Äçüî•");
    EXPECT_EQ(generator.Generate(seed_hash, 3), "\xF0\x9F\x87\xB2\xF0\x9F\x87\xA6");
    EXPECT_EQ(generator.Generate(seed_hash, 4), "üòè");
}

UTEST(EmojiGenerator, GenerateFaces) {
    EmojiSubstitutionGenerator generator{"emoji:+face"_emoji_gen};
    auto seed_hash = PatternGenerator::SeedHash("test");
    EXPECT_EQ(generator.GetMaxLength(), 1);
    EXPECT_EQ(generator.GetCapacity(), 112);
    EXPECT_EQ(generator.Generate(seed_hash, 0), "ü§£");
    EXPECT_EQ(generator.Generate(seed_hash, 1), "üòä");
    EXPECT_EQ(generator.Generate(seed_hash, 2), "üòò");
    EXPECT_EQ(generator.Generate(seed_hash, 3), "üòã");
    EXPECT_EQ(generator.Generate(seed_hash, 4), "ü§ë");
}

UTEST(EmojiGenerator, GenerateFaceSetNonUnique) {
    {
        EmojiSubstitutionGenerator generator{"emoji:+face count=2"_emoji_gen};
        auto seed_hash = PatternGenerator::SeedHash("test");
        EXPECT_EQ(generator.GetMaxLength(), 2);
        EXPECT_EQ(generator.GetCapacity(), 12544);
        EXPECT_EQ(generator.Generate(seed_hash, 0), "ü§£‚ò∫Ô∏è");
        EXPECT_EQ(generator.Generate(seed_hash, 1), "üòäüôÑ");
        EXPECT_EQ(generator.Generate(seed_hash, 2), "üòòüò∑");
        EXPECT_EQ(generator.Generate(seed_hash, 3), "üòãüòé");
        EXPECT_EQ(generator.Generate(seed_hash, 4), "ü§ëü•¥");
    }
    {
        EmojiSubstitutionGenerator generator{"emoji:+face count=6"_emoji_gen};
        auto seed_hash = PatternGenerator::SeedHash("test");
        EXPECT_EQ(generator.GetMaxLength(), 6);
        EXPECT_EQ(generator.GetCapacity(), 1973822685184);
        EXPECT_EQ(generator.Generate(seed_hash, 0), "ü§£‚ò∫Ô∏èü§Æü•π‚ò∫Ô∏èüòÄ");
        EXPECT_EQ(generator.Generate(seed_hash, 1), "üòäüôÑüòÜü§íüò¨üòÄ");
        EXPECT_EQ(generator.Generate(seed_hash, 2), "üòòüò∑üòµü§ëü§ïüòÄ");
        EXPECT_EQ(generator.Generate(seed_hash, 3), "üòãüòéüôÇüôâüßêüòÄ");
        EXPECT_EQ(generator.Generate(seed_hash, 4), "ü§ëü•¥üòßü´°üí©üòÄ");
    }
    {
        EmojiSubstitutionGenerator generator{"emoji:+face count=0-6"_emoji_gen};
        auto seed_hash = PatternGenerator::SeedHash("test");
        EXPECT_EQ(generator.GetMaxLength(), 6);
        EXPECT_EQ(generator.GetCapacity(), 1991604871537);
        EXPECT_EQ(generator.Generate(seed_hash, 0), "ü§£‚ò∫Ô∏èü§Æü•π‚ò∫Ô∏è");
        EXPECT_EQ(generator.Generate(seed_hash, 1), "üòäüôÑüòÜü§íüò¨");
        EXPECT_EQ(generator.Generate(seed_hash, 2), "üòòüò∑üòµü§ëü§ï");
        EXPECT_EQ(generator.Generate(seed_hash, 3), "üòãüòéüôÇüôâüßê");
        EXPECT_EQ(generator.Generate(seed_hash, 4), "ü§ëü•¥üòßü´°üí©");
    }
}

UTEST(EmojiGenerator, GenerateFaceSetUnique) {
    {
        EmojiSubstitutionGenerator generator{"emoji:+face count=2 unique=true"_emoji_gen};
        auto seed_hash = PatternGenerator::SeedHash("test");
        EXPECT_EQ(generator.GetMaxLength(), 2);
        EXPECT_EQ(generator.GetCapacity(), 12432);
        EXPECT_EQ(generator.Generate(seed_hash, 0), "üòßü§ì");
        EXPECT_EQ(generator.Generate(seed_hash, 1), "üòãüò∂");
        EXPECT_EQ(generator.Generate(seed_hash, 2), "üò∂‚Äçüå´Ô∏èüòº");
        EXPECT_EQ(generator.Generate(seed_hash, 3), "‚òπÔ∏èüòØ");
        EXPECT_EQ(generator.Generate(seed_hash, 4), "üôàüòú");
    }
    {
        EmojiSubstitutionGenerator generator{"emoji:+face count=6 unique=true"_emoji_gen};
        auto seed_hash = PatternGenerator::SeedHash("test");
        EXPECT_EQ(generator.GetMaxLength(), 6);
        EXPECT_EQ(generator.GetCapacity(), 1722533662080);
        EXPECT_EQ(generator.Generate(seed_hash, 0), "üòÄüòõüò∂ü´§üòñü§Ø");
        EXPECT_EQ(generator.Generate(seed_hash, 1), "üòÄüò£üò¶ü§íüò∂‚Äçüå´Ô∏èüòó");
        EXPECT_EQ(generator.Generate(seed_hash, 2), "üòÄüòØüëΩü§óüòóü´§");
        EXPECT_EQ(generator.Generate(seed_hash, 3), "üòÄü§®üòóüôâü•µüòî");
        EXPECT_EQ(generator.Generate(seed_hash, 4), "üòÄüòøüò≠ü´°üòπüòΩ");
    }
    {
        EmojiSubstitutionGenerator generator{"emoji:+face count=0-6 unique=true"_emoji_gen};
        auto seed_hash = PatternGenerator::SeedHash("test");
        EXPECT_EQ(generator.GetMaxLength(), 6);
        EXPECT_EQ(generator.GetCapacity(), 1738782547265);
        EXPECT_EQ(generator.Generate(seed_hash, 0), "üòôü§Æüëæüò∫‚ò∫Ô∏è");
        EXPECT_EQ(generator.Generate(seed_hash, 1), "üôÅüòÜüò™üòÆ‚Äçüí®üò£");
        EXPECT_EQ(generator.Generate(seed_hash, 2), "ü•∂ü§Øüòéüòàüòß");
        EXPECT_EQ(generator.Generate(seed_hash, 3), "ü´•üôÉü§Æü§Øüòµ‚Äçüí´");
        EXPECT_EQ(generator.Generate(seed_hash, 4), "üòπüòÆüòñüò†üòÑ");
    }
}

}  // namespace slugkit::generator
